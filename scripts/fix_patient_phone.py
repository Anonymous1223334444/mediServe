#!/usr/bin/env python3
"""
Script pour corriger le num√©ro de t√©l√©phone d'un patient
Usage: python fix_patient_phone.py
"""
import os
import sys
import django

script_dir = os.path.dirname(os.path.abspath(__file__))
# Aller deux niveaux plus haut pour atteindre le r√©pertoire racine du projet Django
# (Exemple: si script est dans /project_root/scripts/, cela renvoie /project_root/)
project_root = os.path.join(script_dir, '..', '') # Ajout d'un '/' final pour s'assurer que c'est un chemin de r√©pertoire
sys.path.insert(0, os.path.abspath(project_root))


# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mediServe.settings')
django.setup()

from patients.models import Patient
from messaging.utils import normalize_phone_number

def fix_patient_phone():
    print("=== CORRECTION NUM√âRO DE T√âL√âPHONE ===\n")
    
    # D'abord, afficher l'√©tat actuel
    token = "879c306a-3931-4096-a432-8d1d6103342e"
    target_phone = "+221778828376"
    
    print(f"üîç Token cible: {token}")
    print(f"üì± Num√©ro cible: {target_phone}\n")
    
    # Trouver le patient avec ce token
    try:
        patient = Patient.objects.get(activation_token=token)
        print(f"‚úÖ Patient trouv√©:")
        print(f"  - ID: {patient.id}")
        print(f"  - Nom: {patient.full_name()}")
        print(f"  - Num√©ro actuel: {patient.phone}")
        print(f"  - Actif: {'Oui' if patient.is_active else 'Non'}")
        
        if patient.phone == target_phone:
            print("\n‚úÖ Le num√©ro est d√©j√† correct!")
            return
        
        # V√©rifier si un autre patient a ce num√©ro
        try:
            other_patient = Patient.objects.get(phone=target_phone)
            if other_patient.id != patient.id:
                print(f"\n‚ö†Ô∏è ATTENTION: Un autre patient a d√©j√† ce num√©ro:")
                print(f"  - ID: {other_patient.id}")
                print(f"  - Nom: {other_patient.full_name()}")
                print(f"  - Token: {other_patient.activation_token}")
                
                print("\nü§î Que voulez-vous faire?")
                print("1. √âchanger les num√©ros entre les deux patients")
                print("2. Forcer le changement (l'autre patient perdra ce num√©ro)")
                print("3. Annuler")
                
                choice = input("\nVotre choix (1-3): ")
                
                if choice == "1":
                    # √âchanger les num√©ros
                    old_phone = patient.phone
                    patient.phone = target_phone
                    other_patient.phone = old_phone
                    patient.save()
                    other_patient.save()
                    print(f"\n‚úÖ Num√©ros √©chang√©s!")
                    print(f"  - {patient.full_name()}: {patient.phone}")
                    print(f"  - {other_patient.full_name()}: {other_patient.phone}")
                elif choice == "2":
                    # Forcer le changement
                    other_patient.phone = f"{other_patient.phone}_old"
                    other_patient.save()
                    patient.phone = target_phone
                    patient.save()
                    print(f"\n‚úÖ Num√©ro mis √† jour pour {patient.full_name()}")
                else:
                    print("\n‚ùå Op√©ration annul√©e")
                    return
                    
        except Patient.DoesNotExist:
            # Pas de conflit, on peut changer directement
            print(f"\nüìù Changement du num√©ro:")
            print(f"  - Ancien: {patient.phone}")
            print(f"  - Nouveau: {target_phone}")
            
            response = input("\nConfirmer le changement? (oui/non): ")
            if response.lower() in ['oui', 'o', 'yes', 'y']:
                patient.phone = normalize_phone_number(target_phone)
                patient.save()
                print("\n‚úÖ Num√©ro mis √† jour avec succ√®s!")
            else:
                print("\n‚ùå Changement annul√©")
                
    except Patient.DoesNotExist:
        print(f"‚ùå Aucun patient trouv√© avec le token: {token}")
        
        # Proposer de cr√©er un nouveau patient
        print("\nüÜï Voulez-vous cr√©er un nouveau patient avec ces informations?")
        response = input("(oui/non): ")
        
        if response.lower() in ['oui', 'o', 'yes', 'y']:
            first_name = input("Pr√©nom: ")
            last_name = input("Nom: ")
            
            patient = Patient.objects.create(
                first_name=first_name,
                last_name=last_name,
                phone=normalize_phone_number(target_phone),
                activation_token=token
            )
            print(f"\n‚úÖ Patient cr√©√©: {patient.full_name()} (ID: {patient.id})")

if __name__ == "__main__":
    fix_patient_phone()