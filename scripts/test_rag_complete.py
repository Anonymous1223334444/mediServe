# scripts/test_rag_complete.py
# Test complet du syst√®me RAG avant utilisation en production

import os
import sys
import django
import time

script_dir = os.path.dirname(os.path.abspath(__file__))
# Aller deux niveaux plus haut pour atteindre le r√©pertoire racine du projet Django
# (Exemple: si script est dans /project_root/scripts/, cela renvoie /project_root/)
project_root = os.path.join(script_dir, '..', '') # Ajout d'un '/' final pour s'assurer que c'est un chemin de r√©pertoire
sys.path.insert(0, os.path.abspath(project_root))


os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mediServe.settings')
django.setup()

from django.conf import settings
sys.path.append(os.path.join(settings.BASE_DIR, 'scripts'))

from patients.models import Patient
from documents.models import DocumentUpload
from rag.your_rag_module import (
    VectorStoreHDF5, EmbeddingGenerator, 
    HybridRetriever, GeminiLLM, RAG
)

def test_rag_for_all_patients():
    """Test le RAG pour tous les patients actifs"""
    
    print("\n" + "="*80)
    print("üß™ TEST COMPLET DU SYST√àME RAG")
    print("="*80)
    
    # R√©cup√©rer tous les patients actifs avec documents
    patients = Patient.objects.filter(
        is_active=True,
        uploaded_documents__upload_status='indexed'
    ).distinct()
    
    if not patients.exists():
        print("‚ùå Aucun patient actif avec documents index√©s trouv√©.")
        print("\nActivez d'abord un patient avec :")
        print("python scripts/activate_patient.py --id 1")
        return
    
    print(f"\nüìä {patients.count()} patient(s) actif(s) trouv√©(s)")
    
    # Questions de test vari√©es
    test_questions = [
        "Bonjour, comment allez-vous ?",
        "Quels sont mes documents m√©dicaux ?",
        "R√©sume mon dernier rapport m√©dical",
        "Quels m√©dicaments je prends actuellement ?",
        "Quels sont mes derniers r√©sultats d'analyses ?",
        "Y a-t-il des anomalies dans mes examens ?",
    ]
    
    # Tester pour chaque patient
    for patient in patients:
        print(f"\n{'='*60}")
        print(f"üë§ Patient: {patient.full_name()} (ID: {patient.id})")
        print(f"üì± T√©l√©phone: {patient.phone}")
        
        # V√©rifier les documents
        docs = DocumentUpload.objects.filter(patient=patient, upload_status='indexed')
        print(f"üìÑ Documents index√©s: {docs.count()}")
        for doc in docs[:3]:
            print(f"   ‚Ä¢ {doc.original_filename}")
        
        # V√©rifier l'existence des fichiers RAG
        vector_dir = os.path.join(settings.MEDIA_ROOT, 'vectors', f'patient_{patient.id}')
        hdf5_path = os.path.join(vector_dir, 'vector_store.h5')
        bm25_dir = os.path.join(settings.MEDIA_ROOT, 'indexes', f'patient_{patient.id}_bm25')
        
        print(f"\nüîç V√©rification des fichiers:")
        print(f"   HDF5: {'‚úÖ' if os.path.exists(hdf5_path) else '‚ùå'} {hdf5_path}")
        print(f"   BM25: {'‚úÖ' if os.path.exists(bm25_dir) else '‚ùå'} {bm25_dir}")
        
        if not os.path.exists(hdf5_path):
            print("   ‚ö†Ô∏è  Pas de vector store, passage au patient suivant")
            continue
        
        try:
            # Initialiser le RAG
            print("\n‚öôÔ∏è  Initialisation du RAG...")
            start_init = time.time()
            
            # 1. Charger le vector store
            vector_store = VectorStoreHDF5(hdf5_path)
            vector_store.load_store()
            print(f"   ‚úÖ Vector store charg√© ({len(vector_store.meta)} chunks)")
            
            # 2. Embedder
            embedder = EmbeddingGenerator()
            print(f"   ‚úÖ Embedder initialis√©")
            
            # 3. Retriever
            if os.path.exists(bm25_dir):
                retriever = HybridRetriever(vector_store, embedder, bm25_dir)
                if settings.RAG_SETTINGS.get('USE_RERANKING', True):
                    retriever.enable_reranking('cross-encoder/ms-marco-MiniLM-L-6-v2')
                print(f"   ‚úÖ Retriever hybride avec reranking")
            else:
                retriever = HybridRetriever(vector_store, embedder)
                print(f"   ‚úÖ Retriever dense uniquement")
            
            # 4. LLM
            llm = GeminiLLM()
            print(f"   ‚úÖ LLM Gemini initialis√©")
            
            # 5. RAG
            rag = RAG(retriever, llm)
            init_time = time.time() - start_init
            print(f"   ‚úÖ RAG pr√™t en {init_time:.2f}s")
            
            # Tester quelques questions
            print(f"\nüí¨ Test de questions:")
            for i, question in enumerate(test_questions[:3], 1):
                print(f"\n   Question {i}: {question}")
                
                try:
                    start_query = time.time()
                    response = rag.answer(question, top_k=3)
                    query_time = time.time() - start_query
                    
                    # Afficher la r√©ponse (tronqu√©e)
                    print(f"   R√©ponse ({query_time:.2f}s): {response[:150]}...")
                    
                except Exception as e:
                    print(f"   ‚ùå Erreur: {e}")
            
        except Exception as e:
            print(f"\n‚ùå Erreur initialisation RAG: {e}")
            import traceback
            traceback.print_exc()
    
    print("\n" + "="*80)
    print("‚úÖ TEST TERMIN√â")
    print("="*80)


def test_specific_patient(patient_id, question=None):
    """Test le RAG pour un patient sp√©cifique avec une question"""
    try:
        patient = Patient.objects.get(id=patient_id, is_active=True)
        print(f"\nüë§ Test pour: {patient.full_name()}")
        
        # Si pas de question fournie, utiliser une question par d√©faut
        if not question:
            question = "Quels sont mes documents m√©dicaux disponibles ?"
        
        print(f"‚ùì Question: {question}")
        
        # Chemins
        vector_dir = os.path.join(settings.MEDIA_ROOT, 'vectors', f'patient_{patient.id}')
        hdf5_path = os.path.join(vector_dir, 'vector_store.h5')
        bm25_dir = os.path.join(settings.MEDIA_ROOT, 'indexes', f'patient_{patient.id}_bm25')
        
        if not os.path.exists(hdf5_path):
            print("‚ùå Pas de vector store pour ce patient")
            return
        
        # Initialiser et tester
        vector_store = VectorStoreHDF5(hdf5_path)
        vector_store.load_store()
        
        embedder = EmbeddingGenerator()
        
        if os.path.exists(bm25_dir):
            retriever = HybridRetriever(vector_store, embedder, bm25_dir)
        else:
            retriever = HybridRetriever(vector_store, embedder)
        
        llm = GeminiLLM()
        rag = RAG(retriever, llm)
        
        # Poser la question
        start = time.time()
        response = rag.answer(question)
        duration = time.time() - start
        
        print(f"\nüìù R√©ponse ({duration:.2f}s):")
        print("-" * 60)
        print(response)
        print("-" * 60)
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--patient-id', type=int, help='Tester un patient sp√©cifique')
    parser.add_argument('--question', help='Question √† poser')
    parser.add_argument('--all', action='store_true', help='Tester tous les patients')
    
    args = parser.parse_args()
    
    if args.patient_id:
        test_specific_patient(args.patient_id, args.question)
    else:
        test_rag_for_all_patients()