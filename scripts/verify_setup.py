#!/usr/bin/env python3
"""
Script pour v√©rifier la configuration de base du projet
"""
import os
import sys

print("üîç === V√âRIFICATION DE LA CONFIGURATION ===\n")

# 1. V√©rifier le r√©pertoire actuel
print("üìÅ R√©pertoire d'ex√©cution:")
print(f"   Actuel: {os.getcwd()}")

# 2. V√©rifier la structure du projet
required_files = ['manage.py', 'mediServe/__init__.py', 'requirements.txt']
project_root = None

# Chercher la racine du projet
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)

if all(os.path.exists(os.path.join(parent_dir, f)) for f in required_files):
    project_root = parent_dir
    print(f"   Racine du projet: {project_root}")
else:
    print("‚ùå Structure du projet non trouv√©e!")
    print("   Fichiers recherch√©s:", required_files)
    sys.exit(1)

# 3. Configurer le PYTHONPATH
sys.path.insert(0, project_root)
print(f"\nüêç PYTHONPATH configur√©:")
print(f"   {project_root}")

# 4. V√©rifier les variables d'environnement
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mediServe.settings')
print(f"\nüîß Variables d'environnement:")
print(f"   DJANGO_SETTINGS_MODULE: {os.environ.get('DJANGO_SETTINGS_MODULE')}")

# 5. Tester l'import Django
print("\nüì¶ Test des imports:")
try:
    import django
    print(f"   ‚úÖ Django {django.__version__}")
    
    # Configurer Django
    django.setup()
    print("   ‚úÖ Django configur√© avec succ√®s")
    
    # Tester l'acc√®s aux settings
    from django.conf import settings
    print(f"   ‚úÖ BASE_DIR: {settings.BASE_DIR}")
    print(f"   ‚úÖ DEBUG: {settings.DEBUG}")
    
except Exception as e:
    print(f"   ‚ùå Erreur Django: {type(e).__name__}: {e}")
    sys.exit(1)

# 6. Tester les imports du projet
print("\nüìö Test des modules du projet:")
modules_to_test = [
    'patients.models',
    'documents.models',
    'documents.tasks',
    'messaging.services',
]

for module in modules_to_test:
    try:
        __import__(module)
        print(f"   ‚úÖ {module}")
    except ImportError as e:
        print(f"   ‚ùå {module}: {e}")

# 7. V√©rifier Redis
print("\nüî¥ Test Redis:")
try:
    import redis
    r = redis.from_url(settings.CELERY_BROKER_URL)
    if r.ping():
        print(f"   ‚úÖ Redis connect√©: {settings.CELERY_BROKER_URL}")
    else:
        print(f"   ‚ùå Redis ne r√©pond pas")
except Exception as e:
    print(f"   ‚ùå Erreur Redis: {e}")

# 8. V√©rifier Celery
print("\nüåø Test Celery:")
try:
    from celery import current_app
    print(f"   ‚úÖ Celery app: {current_app.main}")
    
    # Lister les t√¢ches
    tasks = [t for t in current_app.tasks if not t.startswith('celery.')]
    print(f"   üìã {len(tasks)} t√¢ches enregistr√©es:")
    for task in tasks[:5]:  # Afficher les 5 premi√®res
        print(f"      - {task}")
    if len(tasks) > 5:
        print(f"      ... et {len(tasks) - 5} autres")
        
except Exception as e:
    print(f"   ‚ùå Erreur Celery: {e}")

# 9. V√©rifier les r√©pertoires
print("\nüìÇ V√©rification des r√©pertoires:")
dirs_to_check = [
    'media',
    'media/patient_documents',
    'media/vectors',
    'media/indexes',
    'logs',
    'scripts'
]

for dir_path in dirs_to_check:
    full_path = os.path.join(project_root, dir_path)
    if os.path.exists(full_path):
        print(f"   ‚úÖ {dir_path}")
    else:
        print(f"   ‚ùå {dir_path} (manquant)")

# 10. V√©rifier le fichier .env
print("\nüîê Fichier .env:")
env_path = os.path.join(project_root, '.env')
if os.path.exists(env_path):
    print(f"   ‚úÖ Fichier .env trouv√©")
    # V√©rifier quelques variables cl√©s
    from dotenv import load_dotenv
    load_dotenv(env_path)
    
    env_vars = [
        'DJANGO_SECRET_KEY',
        'CELERY_BROKER_URL',
        'TWILIO_ACCOUNT_SID',
        'GEMINI_API_KEY'
    ]
    
    for var in env_vars:
        value = os.getenv(var)
        if value and value != f'your-{var.lower()}':
            print(f"   ‚úÖ {var}: configur√©")
        else:
            print(f"   ‚ö†Ô∏è  {var}: non configur√©")
else:
    print(f"   ‚ùå Fichier .env non trouv√©")

print("\n‚úÖ V√©rification termin√©e!")
print("\nüìã Pour ex√©cuter les tests:")
print(f"   cd {project_root}")
print("   python scripts/test_celery_vectorization.py celery")