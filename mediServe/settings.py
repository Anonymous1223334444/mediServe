"""
Django settings for mediServe project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
from dotenv import load_dotenv
import os

load_dotenv()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY= os.getenv('DJANGO_SECRET_KEY')

N8N_BASE_URL = os.getenv("http://localhost:5678", "http://localhost:5678")
N8N_API_KEY   = os.getenv("N8N_API_KEY", None)

# Your Twilio WhatsApp number in E.164 format (e.g. "+1415XXXXXXX")
TWILIO_WHATSAPP_NUMBER = os.getenv('TWILIO_WHATSAPP_NUMBER', '+14155238886')
TWILIO_SMS_NUMBER = os.getenv('TWILIO_SMS_NUMBER', '+16065955879')

SITE_PUBLIC_URL = os.getenv("https://orca-eternal-specially.ngrok-free.app", "https://orca-eternal-specially.ngrok-free.app")

CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://redis:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_VERIFY_SID = os.getenv('TWILIO_VERIFY_SID')
TWILIO_WHATSAPP_NUMBER = os.getenv('TWILIO_WHATSAPP_NUMBER')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', "AIzaSyDL3MPOYAY343tajdd8mwQSPgUDBQVo0uk")
HEALTH_STRUCTURE_NAME = os.getenv('HEALTH_STRUCTURE_NAME', 'Centre Médical Dalal Diam')
WHATSAPP_BUSINESS_PHONE_ID = os.getenv('611149155424921')
WHATSAPP_BUSINESS_TOKEN = os.getenv('EAAZAhIoyGpUgBOZBeigSXXkzTd09ahZBrORIk2biIUs3J1oT9YBka297fS6KOSYQI0jdsOf1X74YzqKVI8KLuZBjyJZCJJZB7E78ZB26gKjUvqvuMDHoMZCfkdNYDl7QPD1PkjoZCdTx6Nywvw3p7yxSIIabm1DB7rgSIp8j7JxZBkQasaFlOX5fJ7OJtZBRcy2bYSlg8sKMLK7DZAhyRBYSguZAVhBFxRrI82gGxMx2QhPyPJTv0ZBBoL')
WHATSAPP_VERIFY_TOKEN = os.getenv('CARE_MEDICAL_VERIFY_2025')


# Configuration Pinecone
PINECONE_API_KEY = os.getenv('PINECONE_API_KEY')
PINECONE_INDEX_NAME = os.getenv('PINECONE_INDEX_NAME', 'medirecord-rag')

# Configuration upload fichiers
FILE_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB

CELERY_TASK_ROUTES = {
    # Tâches de haute priorité sur une queue spéciale
    'documents.tasks.process_document_async': {'queue': 'high_priority'},
    'messaging.tasks.send_broadcast_message_async': {'queue': 'messaging'},
    
    # Tâches de maintenance sur une queue séparée
    'metrics.tasks.cleanup_old_metrics': {'queue': 'maintenance'},
    'sessions.tasks.cleanup_expired_sessions': {'queue': 'maintenance'},
}

CELERY_TASK_ANNOTATIONS = {
    # Limiter la mémoire pour certaines tâches
    'documents.tasks.optimize_document_storage': {'rate_limit': '5/m'},
    'metrics.tasks.collect_system_metrics': {'rate_limit': '10/m'},
}

# Configuration retry pour les tâches critiques
CELERY_TASK_DEFAULT_RETRY_DELAY = 60  # 1 minute
CELERY_TASK_MAX_RETRIES = 3

# Configuration des queues
CELERY_TASK_CREATE_MISSING_QUEUES = True
CELERY_TASK_DEFAULT_QUEUE = 'default'

# Monitoring Celery
CELERY_SEND_TASK_EVENTS = True
CELERY_TASK_SEND_SENT_EVENT = True

# Sérialisation sécurisée
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
    'verbose': {
        'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s [%(filename)s:%(lineno)d]'
    },
    'simple': {
        'format': '%(levelname)s %(message)s'
    },
    },
    'handlers': {
    'console': {
        'level': 'INFO',
        'class': 'logging.StreamHandler',
        'formatter': 'verbose',
    },
    'file': {
        'level': 'DEBUG',  # Abaissé à DEBUG pour tout capturer
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
        'maxBytes': 1010241024,
        'backupCount': 5,
        'formatter': 'verbose',
    },
    'celery': {
        'level': 'DEBUG',  # Abaissé à DEBUG pour tout capturer
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': os.path.join(BASE_DIR, 'logs', 'celery.log'),
        'maxBytes': 1010241024,
        'backupCount': 5,
        'formatter': 'verbose',
    },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
    'celery': {
    'handlers': ['console', 'celery'],
    'level': 'DEBUG',  # Abaissé à DEBUG
    'propagate': False,
    },
    'documents': {  # Logger spécifique pour l'app documents
        'handlers': ['console', 'file', 'celery'],
        'level': 'DEBUG',
        'propagate': False,
    },
    'patients': {  # Logger spécifique pour l'app patients
        'handlers': ['console', 'file'],
        'level': 'DEBUG',
        'propagate': False,
    },
    'rag': {  # Logger spécifique pour l'app rag
        'handlers': ['console', 'file', 'celery'],
        'level': 'DEBUG',
        'propagate': False,
    },
    'messaging': {  # Logger spécifique pour l'app messaging
        'handlers': ['console', 'file'],
        'level': 'DEBUG',
        'propagate': False,
    },
    },
}

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "orca-eternal-specially.ngrok-free.app",
    "inspired-shrew-usually.ngrok-free.app",
    "localhost",
    "127.0.0.1",
    "orca-eternal-specially.ngrok-free.app",
]


CELERY_TASK_ALWAYS_EAGER = DEBUG 
CELERY_EAGER_PROPAGATES_EXCEPTIONS = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'rest_framework.authtoken',
    'drf_yasg',
    'django_celery_results',
    # 'users',
    'patients',
    'documents',
    'sessions.apps.WhatsAppSessionsConfig',
    'rag',
    'mediServe',
    'metrics',
    'messaging',
    # 'n8nautomation',
    # 'sessions.apps.WhatsAppSessionsConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:8000",
    "https://orca-eternal-specially.ngrok-free.app",
    "https://inspired-shrew-usually.ngrok-free.app"
    # etc.
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CSRF_TRUSTED_ORIGINS = [
    'https://orca-eternal-specially.ngrok-free.app',
    'https://api.twilio.com',
]

CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'mediServe.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mediServe.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", "mediserve"),
        "USER": os.getenv("POSTGRES_USER", "mediserve"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", ""),
        "HOST": os.getenv("POSTGRES_HOST", "localhost"),
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
    }
}

# AUTH_USER_MODEL = 'users.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',  # Pour l'interface admin
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'EXCEPTION_HANDLER': 'core.error_handlers.custom_exception_handler',
}

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr-FR'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

RAG_SETTINGS = {
    # Chemin de stockage des index vectoriels
    'VECTOR_STORE_DIR': os.path.join(MEDIA_ROOT, 'vectors'),
    # Chemin de stockage des index BM25
    'BM25_INDEX_DIR': os.path.join(MEDIA_ROOT, 'indexes'),

    # Paramètres d'indexation
    'USE_BM25': True,  # Activer l'indexation BM25
    'USE_SEMANTIC_CHUNKING': True,  # Utiliser le chunking sémantique
    'SEMANTIC_THRESHOLD': 0.75,  # Seuil de similarité pour le chunking

    # Paramètres de recherche
    'USE_RERANKING': True,  # Activer le reranking
    'RERANKER_MODEL': 'cross-encoder/ms-marco-MiniLM-L-6-v2',

    # Limite de taille des documents
    'MAX_FILE_SIZE': 50 * 1024 * 1024,  # 50MB

    # Modèles
    'EMBEDDING_MODEL': 'all-mpnet-base-v2',
    'LLM_MODEL': 'gemini-1.5-flash-latest',

    # Configuration de chunking lexical
    'CHUNK_SIZE': 1000,  # Taille des chunks lexicaux
    'CHUNK_OVERLAP': 200,  # Chevauchement entre chunks
}

os.makedirs(RAG_SETTINGS['VECTOR_STORE_DIR'], exist_ok=True)
os.makedirs(RAG_SETTINGS['BM25_INDEX_DIR'], exist_ok=True)


USE_BM25 = RAG_SETTINGS['USE_BM25']
USE_SEMANTIC_CHUNKING = RAG_SETTINGS['USE_SEMANTIC_CHUNKING']
USE_RERANKING = RAG_SETTINGS['USE_RERANKING']